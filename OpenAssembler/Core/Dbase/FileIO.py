# #####################################################################################
#
#  OpenAssembler V3
#  Owner: Laszlo Mates
#  Email: laszlo.mates@gmail.com
#  Date: 2009.06.08
#
# #####################################################################################

import os
import sys
from Core.Dbase.Data_handler import oas_data_handler

# #####################################################################################################################################
#
# This modeule is handling the file io operations
# mode=0 is a silent mode mode=1 is normal mode
# imputs: 0. command (not important) 1. extension (san, oas,...) 2. path
# oas and san files are identical ones the difference is just a header and the extension
# other file formats can be implemented if needed
#
# #####################################################################################################################################

class oas_fileio(oas_data_handler):

# ######################################################################################################################
# save file module
# ######################################################################################################################

	def oas_file_save(self,mode="normal",filename="",filetype="oas"):
		if filename!="" and filetype!="":
			if str(filetype)=="oas" or str(filetype)=="san":
				if os.path.exists(os.path.dirname(str(filename))):
					result=""
					if str(filetype)=="oas":
						result='''##OpenAssembler file
#
# Generated by OpenAssembler V3
#				
'''
					if str(filetype)=="san":
						result='''##SwissArmyNetwork
#
# Generated by OpenAssembler V3
#				
'''
					result+="define\n{\n"
					result+="\tname "+str(os.path.basename(str(filename)).split(".")[0])+"\n"
					if str(self.oas_scene_setup['endnode'])=="":
						result+="\tend "+str(self.oas_last_node_created)+"\n"
					else:
						result+="\tend "+str(self.oas_scene_setup['endnode'])+"\n"
					result+="}\n\n"
					
					for nds in self.oas_rt.keys():
						result+="node "+str(self.oas_rt[nds]['nodetype'])+"\n{\n"
						result+="\tname "+str(self.oas_rt[nds]['name'])+"\n\n"
						for inps in self.oas_rt[nds]['inputs'].keys():
							value = str(self.oas_rt[nds]['inputs'][str(inps)]['value'])
							if '"' in value:
								value = value.replace("\"", "\'")
							result+="\tinput\t"+str(self.oas_rt[nds]['inputs'][str(inps)]['variable_type'])+"\t"+str(inps)+" \""+value+"\"\n"
						result+="\n"
						for outps in self.oas_rt[nds]['outputs'].keys():
							result+="\toutput\t"+str(self.oas_rt[nds]['outputs'][str(outps)]['variable_type'])+"\t"+str(outps)+"\n"
						result+="\n"
						for setps in self.oas_rt[nds]['settings'].keys():
							result+="\tsetting\t"+str(setps)+"\t\""+str(self.oas_rt[nds]['settings'][str(setps)])+"\"\n"
						result+="}\n\n"
					
					result+="connection\n{\n"
					for cns in self.oas_rt_connections.keys():
						result+="\t"+str(self.oas_rt[str(self.oas_rt_connections[cns]['out_node'])]['name'])+"."+str(self.oas_rt_connections[cns]['out_value'])+" "+str(self.oas_rt[str(self.oas_rt_connections[cns]['in_node'])]['name'])+"."+str(self.oas_rt_connections[cns]['in_value'])+"\n"
					result+="}\n\n"
					
					result+="scene_settings\n{\n"
					for stn in self.oas_scene_setup.keys():
						result+="\t"+str(stn)+" "+str(self.oas_scene_setup[stn])+"\n"
					result+="}\n\n"
					
					result+="node_positions\n{\n"
					for stn in self.oas_rt.keys():
						result+="\t"+str(self.oas_rt[stn]['name'])+" "+str(self.oas_rt[stn]['posx'])+":"+str(self.oas_rt[stn]['posy'])+"\n"
					result+="}\n\n"
					
					file_save=open(str(filename),"w")
					file_save.write(result)
					file_save.close()
					if mode=="normal":
						print "File saved."
					self.oas_save_filename=str(filename)
					return str(filename)
				else:
					if mode=="normal":
						print "[Error] In save: Wrong path."
					else:
						return 0
			#elif....
			else:
				if mode=="normal":
					print "[Error] In save: Wrong filetype."
				else:
					return 0
		else:
			if mode=="normal":
				print "[Error] In save: Wrong parameters."
			else:
				return 0
		
# ######################################################################################################################
# file open module
# ######################################################################################################################
		
	def oas_file_open(self,mode="normal",filename="",filetype="oas"):
		if filename!="" and filetype!="":
			if str(filetype)=="oas" or str(filetype)=="san":
				if os.path.exists(str(filename)):
					files=open(str(filename),"r")
					readed_content=files.read()
					readed_content=readed_content.replace("\r\n","\n")
					files.close()
					self.dBase_builder()
					try:
						definepart=str(readed_content.split("define\n{\n")[1].split("}\n")[0]).strip().split("\n")
						for lns in definepart:
							if str(lns.strip().lstrip().split()[0])=="end":
								self.oas_scene_setup['endnode']=str(lns.strip().lstrip().split()[1])
					except:
						if mode=="normal":
							print "[Error] In open: Wrong file content.../define-part/"
						return 0
					
					try:	
						settingspart=str(readed_content.split("scene_settings\n{\n")[1].split("}\n")[0]).strip().split("\n")		
						for lns in settingspart:
							try:
								self.oas_scene_setup[str(lns.strip().lstrip().split()[0])]=str(lns.strip().lstrip().split()[1])
							except:
								self.oas_scene_setup[str(lns.strip().lstrip().split()[0])]=""
					except:
						if mode=="normal":
							print "[Error] In open: Wrong file content.../settings-part/"
						return 0
					
					ndlist=readed_content.split("\nnode ")
					for x in range(1,len(ndlist)):
						nodetype=ndlist[x].split("}\n")[0].strip().lstrip().split("\n")[0].strip()
						
						if self.oas_node_list.has_key(str(nodetype)):
							iner=ndlist[x].split("}\n")[0].strip().lstrip().split("\n",1)[1].split("{\n")[1].strip().lstrip().split("\n")
							nodename=""
							iss=[]
							sii=[]
							for ln in iner:
								if ln.strip().split()==[]:
									pass
								else:
									if ln.strip().split()[0]=="name":
										nodename=ln.strip().split()[1]
									elif  ln.strip().split()[0]=="input":
										iss.append([ln.strip().split()[2],ln.strip().split("\"")[1],ln.strip().split()[1]])
									elif  ln.strip().split()[0]=="setting":
										sii.append([ln.strip().split()[1],ln.strip().split("\"")[1]])
							creatednode=self.oas_data_create(mode,nodetype=str(nodetype))
							if creatednode==0:
								if mode=="normal":
									print "[Error] In open: Pronlem with: "+str(nodetype)
							else:
								if nodename!="":
									renamereturn=self.oas_data_rename(mode,old=creatednode,new=nodename)
									if renamereturn==0:
										if mode=="normal":
											print "[Error] In open: Problem during the node creation..."
										nodename=creatednode
								idID=""
								for iffinder in self.oas_rt.keys():
									if self.oas_rt[iffinder]["name"]==nodename:
										idID=iffinder
								for issl in iss:
									if self.oas_rt[idID]["inputs"].has_key(issl[0]):
										pass
									else:
										rrrr=self.oas_data_addInput(mode=mode,node=nodename,variablename=issl[0],variabletype=issl[2],defaultvalue="0")
										if rrrr==0:
											if mode=="normal":
												print "[Error] In open: Problem with attribute creation..."
												return 0
									setret=self.oas_data_set(mode,nodevalue=str(nodename+"."+issl[0]),value=issl[1])
									if setret==0:
										if mode=="normal":
											print "[Error] In open: Problem with "+str(nodename+"."+issl[0])

								for issl in sii:
									setret=self.oas_data_set(mode,nodevalue=str(nodename+"."+issl[0]),value=issl[1])
									if setret==0:
										if mode=="normal":
											print "[Error] In open: Problem with "+str(nodename+"."+issl[0])
						else:
							if mode=="normal":
								print "[Error] In open: Unknown nodetype: "+str(nodetype)+" !!!"
					
					try:
						pospart=str(readed_content.split("node_positions\n{\n")[1].split("}\n")[0]).strip().split("\n")
						for lnn in pospart:
							sret=self.oas_data_positions(mode,nodevalue=str(lnn.strip().lstrip().split()[0]),posx=str(lnn.strip().lstrip().split()[1]).split(":")[0],posy=str(lnn.strip().lstrip().split()[1]).split(":")[1])
							if sret==0:
								if mode=="normal":
									print "[Error] In open: Problem with the positions..."
					except:
						pass					

					try:	
						if readed_content.split("connection\n{\n")[1].split("}\n")[0]=="":
							pass
						else:
							conpart=str(readed_content.split("connection\n{\n")[1].split("}\n")[0]).strip().split("\n")	
							for lns in conpart:
								cret=self.oas_data_connect(mode,from_variable=str(lns.strip().lstrip().split()[0]),to_variable=str(lns.strip().lstrip().split()[1]))      
								if cret==0:
									if mode=="normal":
										print "[Error] In open: Problem when connectiong nodes."
					except:
						if mode=="normal":
							print "[Error] In open: Wrong file content.../connection-part/"
						return 0

					self.oas_save_filename=str(filename)
					return str(filename)
				else:
					if mode=="normal":
						print "[Error] In open: Wrong path."
					else:
						return 0
			#elif....
			else:
				if mode=="normal":
					print "[Error] In open: Wrong filetype."
				else:
					return 0
		else:
			if mode=="normal":
				print "[Error] In open: Wrong parameters."
			else:
				return 0


	def oas_file_import(self,mode="normal",filename="",filetype="oas"):
		map=[]
		if filename!="" and filetype!="":
			if str(filetype)=="oas" or str(filetype)=="san":
				if os.path.exists(str(filename)):
					files=open(str(filename),"r")
					readed_content=files.read()
					readed_content=readed_content.replace("\r\n","\n")
					files.close()
					ndlist=readed_content.split("\nnode ")
					for x in range(1,len(ndlist)):
						nodetype=ndlist[x].split("}\n")[0].strip().lstrip().split("\n")[0].strip()
						
						if self.oas_node_list.has_key(str(nodetype)):
							iner=ndlist[x].split("}\n")[0].strip().lstrip().split("\n",1)[1].split("{\n")[1].strip().lstrip().split("\n")
							nodename=""
							iss=[]
							for ln in iner:
								if ln.strip().lstrip().split()==[]:
									pass
								else:
									if ln.strip().lstrip().split()[0]=="name":
										nodename=ln.strip().lstrip().split()[1]
									else:
										iss.append([ln.strip().lstrip().split()[0],ln.strip().lstrip().split(" ",1)[1]])
							creatednode=self.oas_data_create(mode,nodetype=str(nodetype))
							on=nodename
							nodename=self.nameChecker(name=nodename)
							if on!=nodename:
								map.append([on,nodename])
							if creatednode==0:
								if mode=="normal":
									print "[Error] In inport: Pronlem with: "+str(nodetype)
							else:
								if nodename!="":
									renamereturn=self.oas_data_rename(mode,old=creatednode,new=nodename)
									if renamereturn==0:
										if mode=="normal":
											print "[Error] In inport: Problem during the node creation..."
										nodename=creatednode
								for issl in iss:
									setret=self.oas_data_set(mode,nodevalue=str(nodename+"."+issl[0]),value=issl[1].lstrip("\"").strip("\""))
									if setret==0:
										if mode=="normal":
											print "[Error] In inport: Problem with "+str(nodename+"."+issl[0])
						else:
							if mode=="normal":
								print "[Error] In inport: Unknown nodetype: "+str(nodetype)+" !!!"
					
					try:
						pospart=str(readed_content.split("node_positions\n{\n")[1].split("}\n")[0]).strip().split("\n")
						for lnn in pospart:
							nv=str(lnn.strip().lstrip().split()[0])
							nvo=nv
							for nes in map:
								if nes[0]==nv:
									nvo=str(nes[1])
							sret=self.oas_data_positions(mode,nodevalue=nvo,posx=str(lnn.strip().lstrip().split()[1]).split(":")[0],posy=str(lnn.strip().lstrip().split()[1]).split(":")[1])
							if sret==0:
								if mode=="normal":
									print "[Error] In inport: Problem with the positions..."
					except:
						pass					

					try:	
						conpart=str(readed_content.split("connection\n{\n")[1].split("}\n")[0]).strip().split("\n")		
						for lns in conpart:
							from_c=str(lns.strip().lstrip().split()[0])
							to_c=str(lns.strip().lstrip().split()[1])
							fc=from_c
							tc=to_c
							for nes in map:
								if nes[0]==from_c.split(".")[0]:
									fc=str(str(nes[1])+"."+from_c.split(".")[1])
								if nes[0]==to_c.split(".")[0]:
									tc=str(str(nes[1])+"."+to_c.split(".")[1])
							cret=self.oas_data_connect(mode,from_variable=fc,to_variable=tc)      
							if cret==0:
								if mode=="normal":
									print "[Error] In inport: Problem when connectiong nodes."
					except:
						if mode=="normal":
							print "[Error] In inport: Wrong file content.../connection-part/"
						return 0

					return str(filename)
				else:
					if mode=="normal":
						print "[Error] In inport: Wrong path."
					else:
						return 0
			#elif....
			else:
				if mode=="normal":
					print "[Error] In inport: Wrong filetype."
				else:
					return 0
		else:
			if mode=="normal":
				print "[Error] In inport: Wrong parameters."
			else:
				return 0

	def nameChecker(self,mode="normal",name=""):
		nameout=name
		for key in self.oas_rt.keys():
			if self.oas_rt[key]["name"]==name:
				n=0
				while n==0:
					if self.oas_rt[key]["name"]==name+str(n).zfill(3):
						pass
					else:
						nameout=name+str(n).zfill(3)
						n=1
		return str(nameout)